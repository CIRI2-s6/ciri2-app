name: ciri2

networks:
  ciri2_network:
    driver: bridge

services:
  gateway:
    container_name: gateway
    image: jordywalraven/ciri2-gateway:latest
    build:
      context: ./apps/gateway/gateway
      dockerfile: Dockerfile
    ports:
      - 8080:8080
    environment:
      - AUDIENCE=${AUDIENCE}
      - JWK_URL=${JWK_URL}
      - COMPONENT_HOST=${COMPONENT_HOST}
      - GAME_HOST=${GAME_HOST}
      - ACCOUNT_HOST=${ACCOUNT_HOST}
      - INFLUXDB_HOST=${INFLUXDB_HOST}
      - INFLUXDB_PORT=${INFLUXDB_PORT}
      - INFLUXDB_USER=${INFLUXDB_USER}
      - INFLUXDB_USER_PASSWORD=${INFLUXDB_USER_PASSWORD}
    networks:
      - ciri2_network

  grafana:
    container_name: grafana
    image: jordywalraven/ciri2-grafana:latest
    build:
      context: ./apps/gateway/gateway/monitoring/grafana
      dockerfile: Dockerfile
    ports:
      - '4000:3000'
    environment:
      - INFLUXDB_HOST=${INFLUXDB_HOST}
      - INFLUXDB_PORT=${INFLUXDB_PORT}
      - INFLUXDB_USER=${INFLUXDB_USER}
      - INFLUXDB_USER_PASSWORD=${INFLUXDB_USER_PASSWORD}
    networks:
      - ciri2_network

  influxdb:
    container_name: influxdb
    image: influxdb:1.8.10
    environment:
      - INFLUXDB_DB=krakend
      - INFLUXDB_USER=${INFLUXDB_USER}
      - INFLUXDB_USER_PASSWORD=${INFLUXDB_USER_PASSWORD}
      - INFLUXDB_ADMIN_USER=${INFLUXDB_ADMIN_USER}
      - INFLUXDB_ADMIN_PASSWORD=${INFLUXDB_ADMIN_PASSWORD}
    ports:
      - '8086:8086'
    networks:
      - ciri2_network

  frontend:
    container_name: frontend
    image: jordywalraven/ciri2-fe:latest
    build:
      context: ./
      dockerfile: apps/frontend/Dockerfile.dev

    ports:
      - '80:80'
    networks:
      - ciri2_network

  pc-microservice:
    container_name: pc-microservice
    image: jordywalraven/ciri2-pc-microservice:latest
    build:
      context: .
      dockerfile: apps/pc-microservice/Dockerfile
    environment:
      - MONGOURI=${MONGOURI}
      - PC_PORT=${PC_PORT}
    ports:
      - '4050:4050'
    depends_on:
      - mongo
    networks:
      - ciri2_network

  game-microservice:
    container_name: game-microservice
    image: jordywalraven/ciri2-game-microservice:release
    build:
      context: .
      dockerfile: apps/game-microservice/Dockerfile
    environment:
      - REDISURI=${REDISURI}
      - GAME_PORT=${GAME_PORT}
    ports:
      - '4051:4051'
    depends_on:
      - redis
    networks:
      - ciri2_network

  account-microservice:
    container_name: account-microservice
    image: jordywalraven/ciri2-account-microservice:release
    build:
      context: .
      dockerfile: apps/account-service/Dockerfile
    environment:
      - ACCOUNT_PORT=${ACCOUNT_PORT}
    ports:
      - '4052:4052'
    networks:
      - ciri2_network

  mongo:
    container_name: mongo
    image: mongo:latest
    ports:
      - '27017:27017'
    networks:
      - ciri2_network

  mongo-seed:
    build:
      context: ./mongo-seed
      dockerfile: Dockerfile
    depends_on:
      - mongo
    networks:
      - ciri2_network

  redis:
    container_name: redis
    image: redis:latest
    ports:
      - '6379:6379'
    networks:
      - ciri2_network
  kafka:
    container_name: kafka
    image: 'bitnami/kafka:latest'
    environment:
      - KAFKA_CFG_NODE_ID=0
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,PLAINTEXTLOCAL://:9094,CONTROLLER://:9093
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXTLOCAL:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka:9093
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092,PLAINTEXTLOCAL://localhost:9094
      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=false
      - KAFKA_CFG_DELETE_TOPICS_ENABLE=false
    networks:
      - ciri2_network
    ports:
      - '9092:9092'
      - '9093:9093'
      - '9094:9094'
    expose:
      - '9092'
      - '9093'
    volumes:
      - kafka-data:/bitnami/kafka
  # This services creates the topics in the Kafka cluster, afterwards it will exit
  kafka-init:
    image: 'bitnami/kafka:latest'
    networks:
      - ciri2_network
    command: ['/bin/bash', '-c', '/create-topics.sh']
    depends_on:
      - kafka
    volumes:
      - type: bind
        source: ./create-topics.sh
        target: /create-topics.sh
    init: true

  # This service is the Kafka UI, accessible at localhost:8080, allows for easy debugging.
  kafka-ui:
    container_name: kafka-ui
    image: provectuslabs/kafka-ui:latest
    networks:
      - ciri2_network
    ports:
      - 8081:8080
    environment:
      DYNAMIC_CONFIG_ENABLED: 'false'
      KAFKA_CLUSTERS_0_NAME: kafka
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092

volumes:
  kafka-data:
    driver: local
